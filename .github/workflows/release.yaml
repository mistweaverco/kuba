---
name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up env
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PLATFORM=linux" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Build for Linux
        run: ./scripts/build.sh
      - name: Release for Linux
        run: ./scripts/release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up env
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PLATFORM=macos" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Build for macOS
        run: ./scripts/build.sh
      - name: Install the Apple certificate, provisioning profile, and API key
        id: keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_BUILD_PROVISION_PROFILE_BASE64 }}
          AUTH_KEY_BASE64: ${{ secrets.APPLE_AUTH_KEY_BASE64 }}
        run: ./scripts/ci-import-apple-certs.sh
      - name: Sign the amd64 binary
        env:
          CODESIGNING_IDENTITY: ${{ secrets.APPLE_CODESIGNING_IDENTITY }}
          CODESIGNING_PREFIX: ${{ secrets.APPLE_CODESIGNING_PREFIX }}
        run: |
          export CODESIGNING_IDENTITY=$(base64 --decode <<< "$CODESIGNING_IDENTITY")
          export CODESIGNING_PREFIX=$(base64 --decode <<< "$CODESIGNING_PREFIX")
          codesign --sign "$CODESIGNING_IDENTITY" \
            --prefix "$CODESIGNING_PREFIX" \
            --options runtime dist/kuba-darwin-amd64
      - name: Sign the arm64 binary
        env:
          CODESIGNING_IDENTITY: ${{ secrets.APPLE_CODESIGNING_IDENTITY }}
          CODESIGNING_PREFIX: ${{ secrets.APPLE_CODESIGNING_PREFIX }}
        run: |
          export CODESIGNING_IDENTITY=$(base64 --decode <<< "$CODESIGNING_IDENTITY")
          export CODESIGNING_PREFIX=$(base64 --decode <<< "$CODESIGNING_PREFIX")
          codesign --sign "$CODESIGNING_IDENTITY" \
            --prefix "$CODESIGNING_PREFIX" \
            --options runtime dist/kuba-darwin-arm64
      - name: Zip the amd64 binary for notarization
        run: zip -r dist/kuba-darwin-amd64.zip dist/kuba-darwin-amd64
      - name: Zip the arm64 binary for notarization
        run: zip -r dist/kuba-darwin-arm64.zip dist/kuba-darwin-arm64
      - name: Upload the amd64 binary for notarization
        env:
          KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          ISSUER: ${{ secrets.APPLE_ISSUER }}
        run: |
          export KEY_ID=$(base64 --decode <<< "$KEY_ID")
          export ISSUER=$(base64 --decode <<< "$ISSUER")
          xcrun notarytool submit dist/kuba-darwin-amd64.zip \
            --key "${{ steps.keychain.outputs.auth_key_path }}" \
            --key-id "$KEY_ID" \
            --issuer "$ISSUER" \
            --wait
      - name: Upload the arm64 binary for notarization
        env:
          KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          ISSUER: ${{ secrets.APPLE_ISSUER }}
        run: |
          export KEY_ID=$(base64 --decode <<< "$KEY_ID")
          export ISSUER=$(base64 --decode <<< "$ISSUER")
          xcrun notarytool submit dist/kuba-darwin-arm64.zip \
            --key "${{ steps.keychain.outputs.auth_key_path }}" \
            --key-id "$KEY_ID" \
            --issuer "$ISSUER" \
            --wait
      - name: Release for macOS
        run: ./scripts/release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-windows:
    name: Build for Windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up env
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PLATFORM=windows" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Build for Windows
        run: ./scripts/build.sh
      - name: Release for Windows
        run: ./scripts/release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
